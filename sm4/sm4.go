package sm4

var (
	sbox = []byte{
		0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05,
		0x2B, 0x67, 0x9A, 0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
		0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF, 0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62,
		0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80, 0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6,
		0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19, 0xE6, 0x85, 0x4F, 0xA8,
		0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D, 0x35,
		0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87,
		0xD4, 0x00, 0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E,
		0xEA, 0xBF, 0x8A, 0xD2, 0x40, 0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1,
		0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55, 0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3,
		0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0, 0x29, 0x23, 0xAB, 0x0D, 0x53, 0x4E, 0x6F,
		0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C, 0x5B, 0x51,
		0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8,
		0x0A, 0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0,
		0x89, 0x69, 0x97, 0x4A, 0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84,
		0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D, 0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48}
	CK = []uint32{
		0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269,
		0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9,
		0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249,
		0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9,
		0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229,
		0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299,
		0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209,
		0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279}
	FK0 uint32 = 0xA3B1BAC6
	FK1 uint32 = 0x56AA3350
	FK2 uint32 = 0x677D9197
	FK3 uint32 = 0xB27022DC
)

func p(A uint32) uint32 {
	a := make([]byte, 4)
	a[0] = byte(A >> 24)
	a[1] = byte((A >> 16) & 0xFF)
	a[2] = byte((A >> 8) & 0xFF)
	a[3] = byte((A) & 0xFF)
	b := make([]byte, 4)
	b[0] = sbox[a[0]]
	b[1] = sbox[a[1]]
	b[2] = sbox[a[2]]
	b[3] = sbox[a[3]]
	B := uint32(b[0] << 24)
	B += uint32(b[1] << 16)
	B += uint32(b[2] << 8)
	B += uint32(b[3])
	return B
}

func Lsr32(x, n uint32) uint32 {
	n %= 32
	return (x<<n | x>>(32-n))
}

func L(B uint32) uint32 {
	return B ^ (Lsr32(B, 2)) ^ (Lsr32(B, 10)) ^ (Lsr32(B, 18)) ^ (Lsr32(B, 24))
}

func L1(B uint32) uint32 {
	return B ^ (Lsr32(B, 13)) ^ Lsr32(B, 23)
}

func T(R uint32) uint32 {
	return L(p(R))
}

func T1(R uint32) uint32 {
	return L1(p(R))
}

func F(X0, X1, X2, X3, rk uint32) uint32 {
	return X0 ^ T(X1^X2^X3^rk)
}

func F1(X0, X1, X2, X3, rk uint32) uint32 {
	return X0 ^ T1(X1^X2^X3^rk)
}

func Encript(K0, K1, K2, K3, X0, X1, X2, X3 uint32) (Y0, Y1, Y2, Y3 uint32) {
	K0 = K0 ^ FK0
	K1 = K1 ^ FK1
	K2 = K2 ^ FK2
	K3 = K3 ^ FK3
	for i := 0; i < 32; i++ {
		rk := F1(K0, K1, K2, K3, CK[i])
		K0 = K1
		K1 = K2
		K2 = K3
		K3 = rk
		T := F(X0, X1, X2, X3, rk)
		X0 = X1
		X1 = X2
		X2 = X3
		X3 = T
	}
	Y0 = X3
	Y1 = X2
	Y2 = X1
	Y3 = X0
	return Y0, Y1, Y2, Y3
}

func Decript(K0, K1, K2, K3, X0, X1, X2, X3 uint32) (Y0, Y1, Y2, Y3 uint32) {
	rk := make([]uint32, 32)
	K0 = K0 ^ FK0
	K1 = K1 ^ FK1
	K2 = K2 ^ FK2
	K3 = K3 ^ FK3
	for i := 0; i < 32; i++ {
		rk[i] = F1(K0, K1, K2, K3, CK[i])
		K0 = K1
		K1 = K2
		K2 = K3
		K3 = rk[i]
	}
	for i := 0; i < 32; i++ {
		T := F(X0, X1, X2, X3, rk[31-i])
		X0 = X1
		X1 = X2
		X2 = X3
		X3 = T
	}
	Y0 = X3
	Y1 = X2
	Y2 = X1
	Y3 = X0
	return Y0, Y1, Y2, Y3
}

func GET_ULONG_BE(b []byte, i uint32) uint32 {
	return uint32(b[i]<<24) | uint32(b[i+1]<<16) | uint32(b[i+2]<<8) | uint32(b[i+3])
}

func PUT_ULONG_BE(b []byte, n, i uint32) {
	b[i] = byte(n >> 24)
	b[i+1] = byte(n >> 16)
	b[i+2] = byte(n >> 8)
	b[i+3] = byte(n)
}

func EncriptB(bKey, inData []byte) []byte {
	var (
		outData        = make([]byte, 16)
		K0, K1, K2, K3 uint32
		D0, D1, D2, D3 uint32
		Y0, Y1, Y2, Y3 uint32
	)
	K0 = GET_ULONG_BE(bKey, 0)
	K1 = GET_ULONG_BE(bKey, 4)
	K2 = GET_ULONG_BE(bKey, 8)
	K3 = GET_ULONG_BE(bKey, 12)
	D0 = GET_ULONG_BE(inData, 0)
	D1 = GET_ULONG_BE(inData, 4)
	D2 = GET_ULONG_BE(inData, 8)
	D3 = GET_ULONG_BE(inData, 12)
	Y0, Y1, Y2, Y3 = Encript(K0, K1, K2, K3, D0, D1, D2, D3)
	PUT_ULONG_BE(outData, Y0, 0)
	PUT_ULONG_BE(outData, Y1, 4)
	PUT_ULONG_BE(outData, Y2, 8)
	PUT_ULONG_BE(outData, Y3, 12)
	return outData
}

func DecriptB(bKey, inData []byte) []byte {
	var (
		outData        []byte = make([]byte, 16)
		K0, K1, K2, K3 uint32
		D0, D1, D2, D3 uint32
		Y0, Y1, Y2, Y3 uint32
	)
	K0 = GET_ULONG_BE(bKey, 0)
	K1 = GET_ULONG_BE(bKey, 4)
	K2 = GET_ULONG_BE(bKey, 8)
	K3 = GET_ULONG_BE(bKey, 12)
	D0 = GET_ULONG_BE(inData, 0)
	D1 = GET_ULONG_BE(inData, 4)
	D2 = GET_ULONG_BE(inData, 8)
	D3 = GET_ULONG_BE(inData, 12)
	Y0, Y1, Y2, Y3 = Decript(K0, K1, K2, K3, D0, D1, D2, D3)
	PUT_ULONG_BE(outData, Y0, 0)
	PUT_ULONG_BE(outData, Y1, 4)
	PUT_ULONG_BE(outData, Y2, 8)
	PUT_ULONG_BE(outData, Y3, 12)
	return outData
}
